module p_2(
    input instructions
    );  
    wire clk;
    reg [7:0] out_reg;
    //wire [7:0] data_mem [255:0];       //256 long array of 8 bit memory
    reg [7:0] instruction;//256 long array of 8 bit instructions 
    reg [2:0] ctrl,immediate;             //3-bit control
    reg [7:0] pc;               //8-bit pc
    reg [7:0] regMem [1:0];     //two 8-bit registers  
    reg [7:0] cur_inst,rs,rt,rd,alu_out,data_out,jmpr,stpr,write;        //holds current instruction    
    wire ALU_Op,Reg_Dest,Reg_Write,Jump, Mem_Read, Mem_Write, Mem_to_Reg;//control values
    
    //Get Instruction
    InstructionMemory fetch_instruction(pc, clk,rs,rt,rd,immediate,instruction,ctrl);
    
    //Control - All Types
    Control control_unit(ctrl,ALU_Op,Reg_Dest, Reg_Write,Jump,Mem_Read, Mem_Write,Mem_to_Reg);
    
     //ALU Operation - R&I types
    ALU ALU_OP(rs,rt,ALU_Op,alu_output);
    DataMemory (rs,alu_out,Mem_Write,Mem_Read,rd);
    
    // Write to Register
    DestMux(alu_out,data_out, Reg_Write, Mem_Read,rd);
    
    //Moving PC - All Types
    SignExt5to8 jump_val(cur_inst[0:4],jmpr);
    Addr step_val(clk,pc,stpr);
    JumpMux get_next_pc(jmpr,stpr,Jump,pc);
    
   
    always @ (*) begin
       
    end 
endmodule
