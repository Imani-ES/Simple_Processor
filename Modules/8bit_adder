// 490 Project 1

`timescale 1ns/100ps // time scale

module Full_adder(FA_a,FA_b,FA_ci,FA_so,FA_co);// 1 bit Full adder 
  input FA_a,FA_b,FA_ci;// A,B,and Carry in inputs
  output FA_so,FA_co;  // Solutiona nd carry out 
  reg axb,ab,axbc;
  assign #4 axb = FA_a^FA_b;// A XOR B
  assign #4 FA_so = FA_ci^axb;// C XOR A XOR B -> Solution
  assign #2 ab = FA_a*FA_b;// A * B
  assign #2 axbc = axbc * FA_ci;// (A XOR B )C
  assign #3 FA_co = axbc | ab;//  AB OR (A XOR B)C -> Cout
endmodule // end full adder module

module adder8(A[7:0],B[7:0],O[7:0],CO); // 8bit ripple carry adder
  input[7:0] A,B;// Two 8 bit inputs
  output[7:0] O; // 8bit solution and carryout
  output CO;
  wire cin,cout;// keep track of carries
  assign cin = 0;
  
  // add 8 bits
  Full_adder bit0(A[0],B[0],cin,O[0],cout);  
  assign cin = cout;
  
  Full_adder bit1(A[1],B[1],cin,O[1],cout);
  assign cin = cout;
  
  Full_adder bit2(A[2],B[2],cin,O[2],cout);  
  assign cin = cout;
  
  Full_adder bit3(A[3],B[3],cin,O[3],cout); 
  assign cin = cout;
  
  Full_adder bit14(A[4],B[4],cin,O[4],cout);
  assign cin = cout;
  
  Full_adder bit5(A[5],B[5],cin,O[5],cout);
  assign cin = cout;
  
  Full_adder bit6(A[6],B[6],cin,O[6],cout);
  assign cin = cout;
  
  Full_adder bit7(A[7],B[7],cin,O[7],CO);
endmodule // end 8bit ripple carry
